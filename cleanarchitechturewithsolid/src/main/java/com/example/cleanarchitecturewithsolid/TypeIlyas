What is type alias?
In Kotlin, a type alias provides an alternative name for an existing type. It doesn't create a new
type but helps in making code more readable, especially when dealing with long or complex type definitions.
This can be useful for simplifying function signatures, working with higher-order functions, or
improving code clarity.


ype aliases provide alternative names for existing types. If the type name is too long you can introduce
a different shorter name and use the new one instead.
In programming, a type alias is a way to give an existing type a new name. This can be useful for a
variety of reasons, such as making code more readable or providing a more specific name for a type
that is used throughout a codebase.
Kotlin supports type aliases through the typealias keyword. In this article, we'll explore how to use
type aliases in Kotlin and discuss some of the benefits they can provide.


typealias NewName = ExistingType

Benefits of Type Aliases:
1- Improves Readability: Long, complex types or generic types can be shortened for easier reading and understanding.
2- Simplifies Code: Makes method signatures more concise, especially when using complex types like function types.
3- Reduces Repetition: Reduces the need to repeatedly write the same long type.

val clickListener: (View, Int) -> Unit

can be written as

typealias ItemClickListener = (View, Int) -> Unit

val clickListener: ItemClickListener = { view, position ->
    // Handle item click here
}


Example 2: Alias for Generic Types
When working with generics, such as MutableLiveData, you can simplify things with a type alias.

kotlin
Copy code
typealias StringLiveData = MutableLiveData<String>

val liveData: StringLiveData = MutableLiveData()

Example 3: Using Type Aliases in Android
In Android, suppose you are managing network responses where you typically use a Result type with a Boolean for success and String for a message. Instead of repeating this structure, you can use a type alias:

kotlin
Copy code
typealias NetworkResponse = Result<Pair<Boolean, String>>

fun handleResponse(response: NetworkResponse) {
    if (response.isSuccess) {
        // Handle success
    } else {
        // Handle failure
    }
}
Here, the alias NetworkResponse makes it easier to understand the type without repeating Result<Pair<Boolean, String>> everywhere.

Real-Time Use Case
Imagine you're working with Retrofit in Android for network requests. Instead of repeating Call<Response<List<SomeObject>>> multiple times, you can alias it:

kotlin
Copy code
typealias MyApiCall = Call<Response<List<SomeObject>>>

fun fetchItems(): MyApiCall {
    return apiService.getItems()
}
This simplifies the function signature and makes the code more readable, especially when working with APIs.