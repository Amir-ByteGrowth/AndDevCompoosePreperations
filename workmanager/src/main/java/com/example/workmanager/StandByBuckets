App Standby Buckets

bookmark_border
Android 9 (API level 28) and later support App Standby Buckets. App Standby Buckets help the system
prioritize apps' requests for resources based on how recently and how frequently the apps are used.
Based on app usage patterns, each app is placed in one of five priority buckets. The system limits the
device resources available to each app based on which bucket the app is in.

Priority buckets

The system dynamically assigns each app to a priority bucket, reassigning the apps as needed.
The system might rely on a preloaded app that uses machine learning to determine how likely each app
is to be used, and assigns apps to the appropriate buckets.

If the system app isn't present on a device, the system defaults to sorting apps based on how recently
they are used. Apps that are more active are assigned to buckets that give them higher priority, making
more system resources available to the app. In particular, the bucket determines how frequently the
app's jobs run and how often the app can trigger alarms. These restrictions apply only while the device
is on battery power. While the device is charging, the system doesn't impose these restrictions.

Note: Every manufacturer can set their own criteria for how non-active apps are assigned to buckets.
Don't try to influence which bucket your app is assigned to. Instead, focus on making sure your app
behaves well in whichever bucket it might be in. To find out which bucket your app is in, call
UsageStatsManager.getAppStandbyBucket().
The priority buckets are the following:

Active: app is being used or was used very recently.
Working set: app is in regular use.
Frequent: app is often used but not daily.
Rare: app isn't frequently used.
Restricted: app consumes a lot of system resources or might exhibit undesirable behavior.
In addition to these priority buckets, there's a special never bucket for apps that are installed but
never ran. The system imposes severe restrictions on these apps.


Note: Apps that are on the Doze exemption list are exempted from the App Standby Bucket-based restrictions.
The following descriptions are for the non-predictive case. By contrast, when the prediction uses machine learning to predict behavior, buckets are chosen in anticipation of the user's next actions rather than based on recent usage. For example, a recently used app might end up in the rare bucket because machine learning predicts that the app might not be used for several hours.

Active

An app is in the active bucket while it is used, is very recently used, or when it does any of the following:

Launches an activity.
Runs a long running foreground service.
Is tapped by the user from a notification.
If an app is in the active bucket, the system doesn't place any restrictions on the app's jobs or alarms.

User interaction assigns apps as active

On Android 9 (API level 28) and higher, when the user interacts with your app in certain ways, the system temporarily places your app into the active bucket. After the user stops interacting with your app, the system places it into a bucket based on usage history.

The following are examples of interactions that trigger this system behavior:

The user taps on a notification that your app sends.

Note: If the user swipes away the notification without tapping on it, the system doesn't consider that action to be an interaction with your app.
The user interacts with a foreground service in your app by tapping a media button.
The user connects to your app while interacting with Android Automotive OS, where your app uses either a foreground service or CONNECTION_TYPE_PROJECTION.
Working set

An app is in the working set bucket if it runs often but it isn't active. For example, a social media app that the user launches almost daily is likely to be in the working set. Apps are also promoted to the working set bucket if they're used indirectly.

If an app is in the working set, the system imposes mild restrictions on its ability to run jobs and trigger alarms. For details, see Power management restrictions.

Frequent

An app is in the frequent bucket if it is used regularly but not necessarily every day. For example, a workout-tracking app that the user runs at the gym might be in the frequent bucket.

If an app is in the frequent bucket, the system imposes stronger restrictions on its ability to run jobs and trigger alarms. For details, see Power management restrictions.

Rare

An app is in the rare bucket if it isn't used often. For example, a hotel app that the user only runs while staying at that hotel might be in the rare bucket.

If an app is in the rare bucket, the system imposes strict restrictions on its ability to run jobs and trigger alarms. The system also limits the app's ability to connect to the internet. For details, see Power management restrictions.

Restricted

This bucket, added in Android 12 (API level 31), has the lowest priority and the highest restrictions of all the buckets. The system considers your app's behavior, such as how often the user interacts with it, to decide whether to place your app in the restricted bucket.

On Android 13 (API level 33) and higher, unless your app qualifies for an exemption, the system places your app in the restricted bucket in the following situations:

The user doesn't interact with your app for a specific number of days. On Android 12 (API level 31) and 12L (API level 32), the number of days is 45. Android 13 reduces the number of days to 8.

Note: Any duration that the device is off doesn't count towards the interactivity limit.
Your app invokes an excessive number of broadcasts or bindings during a 24-hour period.
If the system places your app in the restricted bucket, the following restrictions apply:

You can run jobs once per day in a 10-minute batched session. During this session, the system groups your app's jobs with other apps' jobs.
Restricted jobs don't run by themselves. There must be at least one other job running or pending at the same time, which can include any other job.
Your app can run fewer expedited jobs, compared to when the system places your app in a less restrictive bucket.
Your app can invoke one alarm per day. This alarm can be either an exact alarm or an inexact alarm.
Note: Unlike other buckets, these power management restrictions apply to the restricted bucket even when the device is charging. However, restrictions are loosened when the device is charging, idle, and on an unmetered network.
Exemptions from the restricted bucket

The following types of apps are exempt from entering the restricted bucket and bypass the inactivity trigger, even on Android 12 and higher:

Companion device apps
Apps running on a device in Demo Mode
Device owner apps
Profile owner apps
Persistent apps
VPN apps
Apps that have the ROLE_DIALER role
Apps that the user has explicitly designated to provide "unrestricted" functionality in system settings
Apps with active widgets
Apps that are granted at least one of the following permissions:
USE_EXACT_ALARM
ACCESS_BACKGROUND_LOCATION
Evaluate the priority bucket

To check which bucket your app is assigned to, do one of the following:

Call getAppStandbyBucket().
Run the following command in a terminal window:


adb shell am get-standby-bucket PACKAGE_NAME
The system throttles your app whenever it's placed in an App Standby Bucket whose value is greater than STANDBY_BUCKET_ACTIVE (10).

Best practices

If your app is following best practices for Doze and app standby, the later power management features aren't difficult. However, some app behaviors which previously worked well might cause problems.

Don't try to manipulate the system into putting your app into a certain bucket. The system's method of placing priority can change, and every device manufacturer might choose to write their own bucketing app with its own algorithm. Instead, make sure your app behaves appropriately no matter which bucket it's in.
If an app doesn't have a launcher activity, it might never be promoted to the active bucket. Consider redesigning your app to have such an activity.
If the users can't interact with app notifications, users are unable to trigger the app's promotion to the active bucket. In this case, consider redesigning some notifications that let users interact. For some guidelines, see the Material Design Notifications design patterns.
If the app doesn't show a notification upon receiving a high-priority Firebase Cloud Messaging (FCM) message, the user can't interact with the app and thus promote it to the active bucket. In fact, the only intended use for high priority FCM messages is to push a notification to the user, so this situation must not occur. On 12L (API level 32) and lower, if you inappropriately mark an FCM message as high priority when it doesn't trigger user interaction, it can cause future messages to be deprioritized.

Note: If the user repeatedly dismisses a notification, the system gives the user the option to block that notification in the future. Don't spam the user with notifications to try to keep your app in the active bucket.
If apps are split across multiple packages, those packages might be in different buckets and have different access levels. Test these apps with the packages assigned to various buckets to make sure the app behaves properly.