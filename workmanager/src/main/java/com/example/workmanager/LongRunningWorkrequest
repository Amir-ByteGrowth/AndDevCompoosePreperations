Support for long-running workers

WorkManager has built-in support for long running workers. In such cases, WorkManager can provide a
signal to the OS that the process should be kept alive if possible while this work is executing.
These Workers can run longer than 10 minutes. Example use-cases for this new feature include bulk
uploads or downloads (that cannot be chunked), crunching on an ML model locally, or a task that's important to the user of the app.

Under the hood, WorkManager manages and runs a foreground service on your behalf to execute the WorkRequest,
while also showing a configurable notification.

ListenableWorker now supports the setForegroundAsync() API, and CoroutineWorker supports a suspending
setForeground() API. These APIs allow developers to specify that this WorkRequest is important (from a user perspective) or long-running.

Starting with 2.3.0-alpha03, WorkManager also allows you to create a PendingIntent, which can be used
to cancel workers without having to register a new Android component using the createCancelPendingIntent()
API. This approach is especially useful when used with the setForegroundAsync() or setForeground() APIs,
which can be used to add a notification action to cancel the Worker.

Creating and managing long-running workers

Kotlin developers should use CoroutineWorker. Instead of using setForegroundAsync(), you can use the
suspending version of that method, setForeground().


class DownloadWorker(context: Context, parameters: WorkerParameters) :
   CoroutineWorker(context, parameters) {

   private val notificationManager =
       context.getSystemService(Context.NOTIFICATION_SERVICE) as
               NotificationManager

   override suspend fun doWork(): Result {
       val inputUrl = inputData.getString(KEY_INPUT_URL)
                      ?: return Result.failure()
       val outputFile = inputData.getString(KEY_OUTPUT_FILE_NAME)
                      ?: return Result.failure()
       // Mark the Worker as important
       val progress = "Starting Download"
       setForeground(createForegroundInfo(progress))
       download(inputUrl, outputFile)
       return Result.success()
   }

   private fun download(inputUrl: String, outputFile: String) {
       // Downloads a file and updates bytes read
       // Calls setForeground() periodically when it needs to update
       // the ongoing Notification
   }
   // Creates an instance of ForegroundInfo which can be used to update the
   // ongoing notification.
   private fun createForegroundInfo(progress: String): ForegroundInfo {
       val id = applicationContext.getString(R.string.notification_channel_id)
       val title = applicationContext.getString(R.string.notification_title)
       val cancel = applicationContext.getString(R.string.cancel_download)
       // This PendingIntent can be used to cancel the worker
       val intent = WorkManager.getInstance(applicationContext)
               .createCancelPendingIntent(getId())

       // Create a Notification channel if necessary
       if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
           createChannel()
       }

       val notification = NotificationCompat.Builder(applicationContext, id)
           .setContentTitle(title)
           .setTicker(title)
           .setContentText(progress)
           .setSmallIcon(R.drawable.ic_work_notification)
           .setOngoing(true)
           // Add the cancel action to the notification which can
           // be used to cancel the worker
           .addAction(android.R.drawable.ic_delete, cancel, intent)
           .build()

       return ForegroundInfo(notificationId, notification)
   }

   @RequiresApi(Build.VERSION_CODES.O)
   private fun createChannel() {
       // Create a Notification channel
   }

   companion object {
       const val KEY_INPUT_URL = "KEY_INPUT_URL"
       const val KEY_OUTPUT_FILE_NAME = "KEY_OUTPUT_FILE_NAME"
   }
}