Introduction
Before getting started, Lets discuss on Generics. Generics are used to provide general implementation
of a classes or function or interfaces.
Here is the sample generic method

In above code, you can pass any type of data to displayValue method.
Now lets try to print what is the type of T. Run below code and see the output

You will see below error after executing above code
Cannot use ‘T’ as reified type parameter. Use a class instead.
The reason is, like java, in kotlin also, type information will be erasured during compile time
when you use generics, the type information is removed at compile-time. This process is known as type
erasure. For instance, if you have a List<String>, at runtime, it's just treated as a plain List
without any knowledge of its type parameter.
This means you can’t perform operations like checking if an object is of a generic type at runtime.
To solve this, we need to pass type to generic function like below

To avoid to write above boilerplate code, kotlin provides reified keyword to access the type at run
time. Lets see the code below

The keyword reified enables you to access the type of info at runtime that should have been erased
during code compilation. The reified keyword uses an inline function to perform this task.
If a function is marked as inline , then wherever the function is called, the compiler will paste
the whole body of the function there.
Apart from the above use case, there are other things that can be done using reified. For example,
we can use functions with the same arguments and name but different return type .
Lets say, i want to write a function to return different data based on marks
fun displayData(marks: Int): Int {
  return marks
}

fun displayData(marks: Int): String {
  return "Congratulations! you scored more than 90%";
}
The above overloaded function will throw an error because, for function overloading, the number of
arguments or type of arguments should differ and not the return type.
To solve this, We can refactor the above functions by using reified keyword

Limitations
One of the primary constraints is that reified type parameters can only be used with inline functions.
This linkage is due to how reified types preserve type information by inlining the function code at the call site.
Reified type parameters cannot represent some complex or non-denotable types. For instance, you
cannot have a reified parameter for types like List<Int> or Array<String> directly.
inline fun <reified T> printList(list: List<T>) {
    // This won't work as expected for types like List<Int>
}
Reified type parameters can’t be used in certain scenarios, like as type arguments for non-inline
functions, in object declarations, or as property types in a class.
class SampleClass<reified T> { ... } //This will not work

//////////////////////
Type checking and type casting of reified types

The main objective of a reified type parameter is to know the exact type that the type parameter T represents at runtime.


Let's say we have a list of different types of fruits:

val fruits = listOf(Apple(), Orange(), Banana(), Orange())
And we want to filter all the Orange types in a separate list like following:

val oranges = listOf(Orange(), Orange())
Without reified

For filtering the fruit types, we may write an extension function on List<Any> like following:

fun <T> List<Any>.filterFruit(): List<T> {
    return this.filter { it is T }.map { it as T }          // Error and Warning
}
In this code, first we filter the types and only take the element if its type matches the given type
argument. Then we cast each element to the given type argument and return the List. But there are two problems.

Type checking

While type checking it is T, we are introduced to another error by the compiler: Cannot check for
instance of erased type: T. This is another kind of error you may come across due to type erasure.

Type casting

While type casting it as T, we are also given a warning: Unchecked cast: Any to T. The compiler cannot confirm the type due to type erasure.

reified types to the rescue

We can easily overcome these two problems by marking the function as inline and making the type parameter reified as explained earlier:

inline fun <reified T> List<Any>.filterFruit(): List<T> {
    return this.filter { it is T }.map { it as T }
}
And then call it like following:

val oranges = fruits.filterFruit<Orange>()


Passing reified parameter as an argument

The reified modifier makes it possible for a function to pass the type parameter as a type argument to another function that has reified modifier:

inline fun <reified T> doSomething() {
    // Passing T as an argument to another function
    doSomethingElse<T>()
}

inline fun <reified T> doSomethingElse() { }


//Passing reified parameter as an argument
//
//The reified modifier makes it possible for a function to pass the type parameter as a type argument to another function that has reified modifier:
//
//inline fun <reified T> doSomething() {
//    // Passing T as an argument to another function
//    doSomethingElse<T>()
//}

inline fun <reified T> doSomethingElse() { }

//Getting the generic type of the reified type
//
//Sometimes a type argument can be a generic type. For example, List<String> in the function call doSomething<List<String>>(). It's possible to know this entire type, thanks to reification:
//
//inline fun <reified T> getGenericType() {
//    val type: KType = typeOf<T>()
//    println(type)
//}
//Here the typeOf() is a standard library function. The println() function above will print kotlin.collections.List<kotlin.String>, if you call the function as getGenericType<List<String>>(). The KType includes KClass, type argument information and nullability information. Once you know the KType, you can perform reflection on it.
//
//Java interoperability
//
//The inline functions declared without reified type parameters can be called from Java as regular Java functions. But the ones declared with the reified type parameters are not callable from Java.
//
//Even if you call it using the reflection like following:
//
//Method method = YourFilenameKt.class.getDeclaredMethod("doSomething", Object.class);
//method.invoke("hello", Object.class);
//You get the UnsupportedOperationException: This function has a reified type parameter and thus can only be inlined at compilation time, not called directly.
//
//Conclusion
//
//In many cases, the reified types help us get rid of the following errors and warnings:
//
//Error: Cannot use 'T' as reified type parameter. Use a class instead.
//Error: Cannot check for instance of erased type: T
//Warning: Unchecked cast: SomeType