    Where to hoist state
        In a Compose application, where you hoist UI state depends on whether UI logic or business logic
        requires it. This document lays out these two main scenarios.

    Best practice
        You should hoist UI state to the lowest common ancestor between all the composables that read and
        write it. You should keep state closest to where it is consumed. From the state owner, expose to
        consumers immutable state and events to modify the state.
        The lowest common ancestor can also be outside of the Composition. For example, when hoisting state
        in a ViewModel because business logic is involved.

    This page explains this best practice in detail and a caveat to keep in mind.

    Types of UI state and UI logic
        Below there are definitions for types of UI state and logic that are used throughout this document.

    UI state
        UI state is the property that describes the UI. There are two types of UI state:
    Screen UI state
        is what you need to display on the screen. For example, a NewsUiState class can contain the
        news articles and other information needed to render the UI. This state is usually connected
        with other layers of the hierarchy because it contains app data.
    UI element state refers to
        properties intrinsic to UI elements that influence how they are rendered. A UI element may
        be shown or hidden and may have a certain font, font size, or font color. In Android Views,
        the View manages this state itself as it is inherently stateful,
        exposing methods to modify or query its state. An example of this are the get and set methods
        of the TextView class for its text. In Jetpack Compose, the state is external to the composable,
        and you can even hoist it out of the immediate vicinity of the composable into the calling
        composable function or a state holder. An example of this is ScaffoldState for the Scaffold composable.

    Logic
        Logic in an application can be either business logic or UI logic:

    Business logic
        is the implementation of product requirements for app data. For example, bookmarking an
        article in a news reader app when the user taps the button. This logic to save a bookmark to
        a file or database is usually placed in the domain or data layers. The state holder usually
        delegates this logic to those layers by calling the methods they expose.

    UI logic
        is related to how to display UI state on the screen. For example, obtaining the right search bar
        hint when the user has selected a category, scrolling to a particular item in a list, or the
        navigation logic to a particular screen when the user clicks a button.

    UI logic

    When UI logic needs to read or write state, you should scope the state to the UI, following its
    lifecycle. To achieve this, you should hoist the state at the correct level in a composable function.
    Alternatively, you can do so in a plain state holder class, also scoped to the UI lifecycle.

    Below is a description of both solutions and explanation of when to use which.

    Composables as state owner

    Having UI logic and UI element state in composables is a good approach if the state and logic is
    simple. You can leave your state internal to a composable or hoist as required.

    No state hoisting needed

    Hoisting state isn't always required. State can be kept internal in a composable when no other
    composable need to control it. In this snippet, there is a composable that expands and collapses on tap:

    @Composable
    fun ChatBubble(
        message: Message
    ) {
        var showDetails by rememberSaveable { mutableStateOf(false) } // Define the UI element expanded state

        ClickableText(
            text = AnnotatedString(message.content),
            onClick = { showDetails = !showDetails } // Apply simple UI logic
        )

        if (showDetails) {
            Text(message.timestamp)
        }
    }

    Business logic

    If composables and plain state holders classes are in charge of the UI logic and UI element state,
    a screen level state holder is in charge of the following tasks:

    Providing access to the business logic of the application that is usually placed in other layers
    of the hierarchy such as the business and data layers.
    Preparing the application data for presentation in a particular screen, which becomes the screen UI state.

ViewModels as state owner

The benefits of AAC ViewModels in Android development make them suitable for providing access to the
 business logic and preparing the application data for presentation on the screen.



Caveat

For some Compose UI element state, hoisting to the ViewModel might require special considerations. For example, some state holders of Compose UI elements expose methods to modify the state. Some of them might be suspend functions that trigger animations. These suspend functions can throw exceptions if you call them from a CoroutineScope that is not scoped to the Composition.

Let’s say the app drawer’s content is dynamic and you need to fetch and refresh it from the data layer after it’s closed. You should hoist the drawer state to the ViewModel so you can call both the UI and business logic on this element from the state owner.

However, calling DrawerState's close() method using the viewModelScope from Compose UI causes a runtime exception of type IllegalStateException with a message reading “a MonotonicFrameClock is not available in this CoroutineContext”.

To fix this, use a CoroutineScope scoped to the Composition. It provides a MonotonicFrameClock in the CoroutineContext that is necessary for the suspend functions to work.

Warning: Calling some suspend functions exposed from Compose UI element state that trigger animations throw exceptions if called from a CoroutineScope that's not scoped to the Composition. For example, LazyListState.animateScrollTo() and DrawerState.close().
To fix this crash, switch the CoroutineContext of the coroutine in the ViewModel to one that is scoped to the Composition. It could look like this:


class ConversationViewModel(/*...*/) : ViewModel() {

    val drawerState = DrawerState(initialValue = DrawerValue.Closed)

    private val _drawerContent = MutableStateFlow(DrawerContent.Empty)
    val drawerContent: StateFlow<DrawerContent> = _drawerContent.asStateFlow()

    fun closeDrawer(uiScope: CoroutineScope) {
        viewModelScope.launch {
            withContext(uiScope.coroutineContext) { // Use instead of the default context
                drawerState.close()
            }
            // Fetch drawer content and update state
            _drawerContent.update { content }
        }
    }
}

// in Compose
@Composable
private fun ConversationScreen(
    conversationViewModel: ConversationViewModel = viewModel()
) {
    val scope = rememberCoroutineScope()

    ConversationScreen(onCloseDrawer = { conversationViewModel.closeDrawer(uiScope = scope) })
}

