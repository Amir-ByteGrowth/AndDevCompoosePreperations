Kotlin coroutines enable you to write clean, simplified asynchronous code that keeps your app responsive
while managing long-running tasks such as network calls or disk operations.

Manage long-running tasks

Coroutines build upon regular functions by adding two operations to handle long-running tasks.
In addition to invoke (or call) and return, coroutines add suspend and resume:

suspend pauses the execution of the current coroutine, saving all local variables.
resume continues execution of a suspended coroutine from the place where it was suspended.
You can call suspend functions only from other suspend functions or by using a coroutine builder
such as launch to start a new coroutine.

The following example shows a simple coroutine implementation for a hypothetical long-running task:


suspend fun fetchDocs() {                             // Dispatchers.Main
    val result = get("https://developer.android.com") // Dispatchers.IO for `get`
    show(result)                                      // Dispatchers.Main
}

suspend fun get(url: String) = withContext(Dispatchers.IO) { /* ... */ }


In this example, get() still runs on the main thread, but it suspends the coroutine before it starts
the network request. When the network request completes, get resumes the suspended coroutine instead
of using a callback to notify the main thread.

Kotlin uses a stack frame to manage which function is running along with any local variables. When
suspending a coroutine, the current stack frame is copied and saved for later. When resuming, the stack
frame is copied back from where it was saved, and the function starts running again. Even though the
code might look like an ordinary sequential blocking request, the coroutine ensures that the network
request avoids blocking the main thread.


Use coroutines for main-safety

Kotlin coroutines use dispatchers to determine which threads are used for coroutine execution.
To run code outside of the main thread, you can tell Kotlin coroutines to perform work on either the
Default or IO dispatcher. In Kotlin, all coroutines must run in a dispatcher,

Note* "even when they're running on the main thread. Coroutines can suspend themselves, and
the dispatcher is responsible for resuming them."

To specify where the coroutines should run, Kotlin provides three dispatchers that you can use:

    Dispatchers.Main - Use this dispatcher to run a coroutine on the main Android thread. This should be
                       used only for interacting with the UI and performing quick work. Examples include calling suspend
                       functions, running Android UI framework operations, and updating LiveData objects.
    Dispatchers.IO - This dispatcher is optimized to perform disk or network I/O outside of the main thread.
                     Examples include using the Room component, reading from or writing to files, and
                     running any network operations.
    Dispatchers.Default - This dispatcher is optimized to perform CPU-intensive work outside of the
    main thread. Example use cases include sorting a list and parsing JSON.Continuing the previous example,
    you can use the dispatchers to re-define the get function. Inside the body of get, call withContext(Dispatchers.IO)
    to create a block that runs on the IO thread pool. Any code you put inside that block always
    executes via the IO dispatcher. Since withContext is itself a suspend function, the function get is also a suspend function.


suspend fun fetchDocs() {                      // Dispatchers.Main
    val result = get("developer.android.com")  // Dispatchers.Main
    show(result)                               // Dispatchers.Main
}

suspend fun get(url: String) =                 // Dispatchers.Main
    withContext(Dispatchers.IO) {              // Dispatchers.IO (main-safety block)
        /* perform network IO here */          // Dispatchers.IO (main-safety block)
    }                                          // Dispatchers.Main
}
